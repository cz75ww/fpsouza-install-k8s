---
- name: Add an apt signing key for Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adding apt repository for Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Install Kubernetes binaries
  apt: 
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - python3-pip
      - kubelet 
      - kubeadm 
      - kubectl

- name: Install bottle python package
  pip:
    name: "{{ item }}"
  with_items:
   - openshift
   - pyyaml

- name: Get IP Addresses
  shell: "ifconfig eth0 | grep inet | head -1 | awk '{print $2}'"
  register: node_ip

- name: Configure node ip
  lineinfile:
    path: /etc/default/kubelet
    line: KUBELET_EXTRA_ARGS=--node-ip={{ ansible_default_ipv4.address }}
    create: yes

- name: Restart kubelet
  service:
    name: "{{ item }}"
    daemon_reload: yes
    state: restarted
  with_items:
    - kubelet
    - containerd

- name: Initialize the Kubernetes cluster using kubeadm
  command: kubeadm init --apiserver-advertise-address="{{ ansible_default_ipv4.address }}" --apiserver-cert-extra-sans="{{ ansible_default_ipv4.address }}"  --node-name k8s-master --pod-network-cidr=10.244.0.0/16

- name: Setup kubeconfig for ubuntu user
  command: "{{ item }}"
  with_items:
    - mkdir -p /home/ubuntu/.kube
    - cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
    - chown ubuntu:ubuntu /home/ubuntu/.kube/config

- name: Copy file with owner and permissions
  ansible.builtin.copy:
    src: files/flannel.yml
    dest: /home/ubuntu/infra-as-code/fpsouza-install-k8s
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: Make sure service has time to start
  ansible.builtin.pause:
    minutes: 1
  when: not ansible_check_mode

- name: Install flannel pod network
  kubernetes.core.k8s:
    state: present
    src: /home/ubuntu/infra-as-code/fpsouza-install-k8s/flannel.yml

# - name: Generate join command
#   command: kubeadm token create --print-join-command
#   register: join_command

# - name: Copy join command to local file
#   local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
